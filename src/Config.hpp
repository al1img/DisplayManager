/*
 *  Config
 *
 *   This program is free software; you can redistribute it and/or modify
 *   it under the terms of the GNU General Public License as published by
 *   the Free Software Foundation; either version 2 of the License, or
 *   (at your option) any later version.
 *
 *   This program is distributed in the hope that it will be useful,
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *   GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License
 *   along with this program; if not, write to the Free Software
 *   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
 *
 * Copyright (C) 2016 EPAM Systems Inc.
 */

#ifndef SRC_CONFIG_HPP_
#define SRC_CONFIG_HPP_

#include <exception>
#include <memory>
#include <string>

#include <libconfig.h++>

#include <ilm/ilm_types.h>

#include <xen/be/Log.hpp>

/***************************************************************************//**
 * @defgroup config Config
 * Config related classes.
 ******************************************************************************/

/***************************************************************************//**
 * Exception generated by Config class.
 * @ingroup config
 ******************************************************************************/
class ConfigException : public std::exception
{
public:

	explicit ConfigException(const std::string& msg) : mMsg(msg) {};
	virtual ~ConfigException() {}

	/**
	 * returns error message
	 */
	const char* what() const throw() { return mMsg.c_str(); };

private:
	std::string mMsg;
};


/***************************************************************************//**
 * Display configuration
 * @ingroup config
 ******************************************************************************/
struct DisplayConfig
{
	std::string name;
	t_ilm_display displayID;
};

/***************************************************************************//**
 * Layer configuration
 * @ingroup config
 ******************************************************************************/
struct LayerConfig
{
	std::string name;
	t_ilm_layer layerID;
	std::string displayName;
	int width;
	int height;
	int zOrder;
};

/***************************************************************************//**
 * Provides different settings for backends.
 * @ingroup config
 ******************************************************************************/
class Config
{
public:

	/**
	 * @param fileName
	 */
	Config(const std::string& fileName);

	const int getDisplaysCount() { return mDisplaysCount; }
	void getDisplayConfig(int index, DisplayConfig& config);

	const int getLayersCount() { return mLayersCount; }
	void getLayerConfig(int index, LayerConfig& config);

private:

	const char* cDefaultCfgName = "dm.cfg";

	XenBackend::Log mLog;
	libconfig::Config mConfig;

	int mDisplaysCount;
	int mLayersCount;

	int readSectionCount(const std::string& name);
};

typedef std::shared_ptr<Config> ConfigPtr;

#endif /* SRC_CONFIG_HPP_ */
